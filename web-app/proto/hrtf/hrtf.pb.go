// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hrtf/hrtf.proto

package hrtf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetHRTFFromNameReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHRTFFromNameReq) Reset()         { *m = GetHRTFFromNameReq{} }
func (m *GetHRTFFromNameReq) String() string { return proto.CompactTextString(m) }
func (*GetHRTFFromNameReq) ProtoMessage()    {}
func (*GetHRTFFromNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_412c03aea376c519, []int{0}
}

func (m *GetHRTFFromNameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHRTFFromNameReq.Unmarshal(m, b)
}
func (m *GetHRTFFromNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHRTFFromNameReq.Marshal(b, m, deterministic)
}
func (m *GetHRTFFromNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHRTFFromNameReq.Merge(m, src)
}
func (m *GetHRTFFromNameReq) XXX_Size() int {
	return xxx_messageInfo_GetHRTFFromNameReq.Size(m)
}
func (m *GetHRTFFromNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHRTFFromNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHRTFFromNameReq proto.InternalMessageInfo

func (m *GetHRTFFromNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HRTFData struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	DatabaseName         string   `protobuf:"bytes,4,opt,name=DatabaseName,proto3" json:"DatabaseName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HRTFData) Reset()         { *m = HRTFData{} }
func (m *HRTFData) String() string { return proto.CompactTextString(m) }
func (*HRTFData) ProtoMessage()    {}
func (*HRTFData) Descriptor() ([]byte, []int) {
	return fileDescriptor_412c03aea376c519, []int{1}
}

func (m *HRTFData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HRTFData.Unmarshal(m, b)
}
func (m *HRTFData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HRTFData.Marshal(b, m, deterministic)
}
func (m *HRTFData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HRTFData.Merge(m, src)
}
func (m *HRTFData) XXX_Size() int {
	return xxx_messageInfo_HRTFData.Size(m)
}
func (m *HRTFData) XXX_DiscardUnknown() {
	xxx_messageInfo_HRTFData.DiscardUnknown(m)
}

var xxx_messageInfo_HRTFData proto.InternalMessageInfo

func (m *HRTFData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *HRTFData) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HRTFData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HRTFData) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func init() {
	proto.RegisterType((*GetHRTFFromNameReq)(nil), "hrtf.GetHRTFFromNameReq")
	proto.RegisterType((*HRTFData)(nil), "hrtf.HRTFData")
}

func init() { proto.RegisterFile("proto/hrtf/hrtf.proto", fileDescriptor_412c03aea376c519) }

var fileDescriptor_412c03aea376c519 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x28, 0x2a, 0x49, 0x03, 0x13, 0x7a, 0x60, 0xbe, 0x10, 0x0b, 0x88, 0xad, 0xa4,
	0xc1, 0x25, 0xe4, 0x9e, 0x5a, 0xe2, 0x11, 0x14, 0xe2, 0xe6, 0x56, 0x94, 0x9f, 0xeb, 0x97, 0x98,
	0x9b, 0x1a, 0x94, 0x5a, 0x28, 0x24, 0xc4, 0xc5, 0x02, 0x62, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x4a, 0x69, 0x5c, 0x1c, 0x20, 0x65, 0x2e, 0x89, 0x25, 0x89, 0x42, 0x7c, 0x5c,
	0x4c, 0x9e, 0x2e, 0x50, 0x59, 0x26, 0x4f, 0x17, 0x90, 0xfa, 0x80, 0xc4, 0x92, 0x0c, 0x09, 0x26,
	0x88, 0x7a, 0x10, 0x1b, 0x6e, 0x06, 0x33, 0xc2, 0x0c, 0x21, 0x25, 0x2e, 0x1e, 0x90, 0xfe, 0xa4,
	0xc4, 0xe2, 0x54, 0xb0, 0x1c, 0x0b, 0x58, 0x0e, 0x45, 0xcc, 0xc8, 0x95, 0x8b, 0x05, 0x64, 0x8f,
	0x90, 0x2d, 0x17, 0x3f, 0x9a, 0xcb, 0x84, 0x24, 0xf4, 0xc0, 0xee, 0xc7, 0x74, 0xb0, 0x14, 0x1f,
	0x44, 0x06, 0xe6, 0x40, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x2f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x20, 0x79, 0xa6, 0x01, 0xfe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HRTFClient is the client API for HRTF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HRTFClient interface {
	GetHRTFFromName(ctx context.Context, in *GetHRTFFromNameReq, opts ...grpc.CallOption) (*HRTFData, error)
}

type hRTFClient struct {
	cc *grpc.ClientConn
}

func NewHRTFClient(cc *grpc.ClientConn) HRTFClient {
	return &hRTFClient{cc}
}

func (c *hRTFClient) GetHRTFFromName(ctx context.Context, in *GetHRTFFromNameReq, opts ...grpc.CallOption) (*HRTFData, error) {
	out := new(HRTFData)
	err := c.cc.Invoke(ctx, "/hrtf.HRTF/GetHRTFFromName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HRTFServer is the server API for HRTF service.
type HRTFServer interface {
	GetHRTFFromName(context.Context, *GetHRTFFromNameReq) (*HRTFData, error)
}

// UnimplementedHRTFServer can be embedded to have forward compatible implementations.
type UnimplementedHRTFServer struct {
}

func (*UnimplementedHRTFServer) GetHRTFFromName(ctx context.Context, req *GetHRTFFromNameReq) (*HRTFData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHRTFFromName not implemented")
}

func RegisterHRTFServer(s *grpc.Server, srv HRTFServer) {
	s.RegisterService(&_HRTF_serviceDesc, srv)
}

func _HRTF_GetHRTFFromName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHRTFFromNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRTFServer).GetHRTFFromName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrtf.HRTF/GetHRTFFromName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRTFServer).GetHRTFFromName(ctx, req.(*GetHRTFFromNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HRTF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hrtf.HRTF",
	HandlerType: (*HRTFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHRTFFromName",
			Handler:    _HRTF_GetHRTFFromName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hrtf/hrtf.proto",
}
